service: omni-eventing

provider:
  name: aws
  runtime: python3.7
  versionFunctions: true
  stage: ${opt:stage, 'devint'}
  region: us-east-1
  timeout: 30
  memorySize: 256
  deploymentBucket: ${ssm:/omni-dw/${self:provider.stage}/sls/deployment/bucket}
  role: ${ssm:/omni-dw/${self:provider.stage}/lambda/role}
  apiName: ${self:service}-api-${self:provider.stage}
  vpc:
    securityGroupIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/sgId}
    subnetIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/subnetA}
  stackTags:
    Application: Eventing
    CreateBy: BizCloudExperts
    Version: "1.0"
    Environment: ${self:provider.stage}

custom:
  alias: ${opt:alias, 'v1'}
  dev:
    account: "332281781429"
    region: "us-east-1"
  devint:
    account: "083868342691"
    region: "us-east-1"
  prod:
    account: "332281781429"
    region: "us-east-1"
  apiKeys: ${file(config/${self:provider.stage}ApiKeys.yaml):keys}
  # serverless-layers:
  #   functions:
  #     - create-subscription
  #     - custom-authorizer
  #     - get-event-types
  #     - datapipeline-shipment-diff
  #     - datapipeline-invoice-diff
  #     - datapipeline-milestone-diff
  #     - create-sns-topics
  #     - delete-subscription
  #     # - sns-publish
  #   dependenciesPath: ./requirements.txt
  pythonRequirements:
    # pythonBin: python3
    layer: true  
  standardResponseHeaders:
    "Access-Control-Allow-Origin": "'*'"
    "Access-Control-Allow-Credentials": "'true'"
    "Access-Control-Allow-Headers": "'*'"

plugins:
  # - serverless-layers
  - serverless-python-requirements  
  - serverless-add-api-key
  - serverless-plugin-multiple-responses
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-aws-alias
  # - serverless-plugin-existing-s3
package:
  individually: true
  exclude:
    - serverless.yaml

functions:
  create-subscription: ${file(config/functions/create-subscription.yml):function}
  custom-authorizer: ${file(config/functions/custom-authorizer.yml):function}
  get-event-types: ${file(config/functions/get-event-types.yml):function}
  datapipeline-shipment-diff: ${file(config/functions/datapipeline-shipment-diff.yml):function}
  create-sns-topics: ${file(config/functions/create-sns-topics.yml):function}
  delete-subscription: ${file(config/functions/delete-subscription.yml):function}
  sns-publish: ${file(config/functions/sns-publish-js.yml):function}
  s3-event: ${file(config/functions/s3-event.yml):function}
  datapipeline-invoice-diff: ${file(config/functions/datapipeline-invoice-diff.yml):function}
  datapipeline-milestone-diff: ${file(config/functions/datapipeline-milestone-diff.yml):function}
  milestone-updates: ${file(config/functions/milestone-updates.yml):function}
  event-publish: ${file(config/functions/event-publish.yml):function}

stepFunctions:
  stateMachines:
    sns-publish-state-machine: ${file(config/step-functions/sns-publish-state-machine.yml):stateMachine}

resources:
  Resources:
    #dynamodb table
    MilestoneEventStatusTable: ${file(config/dynamoDB/milestoneEventStatusTable.yml):MilestoneEventStatusTable}

    BadRequestResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: ACCESS_DENIED
        ResponseTemplates:
          application/json: |
            {
              "errorDescription":"$context.authorizer.message"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '400'
